<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.yurihentai.映射.用户映射">

    <resultMap id="用户加用户信息" type="用户">
        <id column="编号" property="编号"/>
        <result column="用户名" property="用户名"/>
        <result column="账号" property="账号"/>
        <result column="密码" property="密码"/>
        <result column="创建时间" property="创建时间"/>
        <result column="修改时间" property="修改时间"/>
        <!-- 使用查询结果进行查询，将查询结果作为指定属性的值 -->
        <association column="编号" property="用户信息" select="cn.yurihentai.映射.用户信息映射.查找" fetchType="eager"/>
    </resultMap>

    <resultMap id="用户级联用户信息" type="用户">
        <id column="编号" property="编号"/>
        <result column="用户名" property="用户名"/>
        <result column="账号" property="账号"/>
        <result column="密码" property="密码"/>
        <result column="创建时间" property="创建时间"/>
        <result column="修改时间" property="修改时间"/>
        <!-- 类：用户信息 -->
        <result column="i.编号" property="用户信息.编号"/>
        <result column="i.姓名" property="用户信息.姓名"/>
        <result column="i.性别" property="用户信息.性别"/>
        <result column="i.年龄" property="用户信息.年龄"/>
        <result column="i.生日" property="用户信息.生日"/>
        <result column="i.身份证号" property="用户信息.身份证号"/>
    </resultMap>

    <select id="级联查找" resultMap="用户级联用户信息">
        SELECT u.编号, u.用户名, u.账号, u.密码, u.创建时间, u.修改时间,
                i.编号, i.姓名, i.性别, i.年龄, i.生日, i.身份证号
        FROM 用户表 AS u
        LEFT JOIN 用户信息表 AS i
        ON u.编号 = i.编号
        WHERE u.编号 = #{编号}
              AND u.是否删除 = 0
              AND i.是否删除 = 0
    </select>

    <select id="查找" resultMap="用户加用户信息">
        SELECT 编号, 用户名, 账号, 密码, 创建时间, 修改时间
        FROM 用户表
        WHERE 编号 = #{编号} AND 是否删除 = 0
    </select>

    <!--
        useGeneratedKeys：是否启用自动生成主编号(必须数据库支持，入mysql、sqlServer)
        keyProperty：数据库中制定了自动生成主编号的字段
    -->
    <insert id="新增" parameterType="用户" useGeneratedKeys="true" keyProperty="编号" databaseId="mysql">
            INSERT (编号, 用户名, 账号, 密码, 创建时间, 修改时间)
            INTO 用户表
            VALUES (#{编号}, #{用户名}, #{账号}, #{密码}, #{创建时间}, #{创建时间});
        </insert>

    <!--    <insert id="新增" parameterType="用户" databaseId="oracle">-->
    <!-- oracle不支持自动生成主编号，通过子元素查找然后将查找到的值赋给id -->
    <!--          <selectKey order="BEFORE" keyProperty="id" resultType="java.lang.String">-->
    <!--                select employee_seq.nextval from dual-->
    <!--            </selectKey>-->
    <!--            <selectKey order="AFTER" keyProperty="id" resultType="java.lang.String">-->
    <!--                select employee_seq.currval from dual-->
    <!--            </selectKey>-->


    <!--    </insert>-->

    <!--    <update id="更新" parameterType="用户" databaseId="mysql">-->

    <!--    </update>-->
    <!--    <update id="更新" parameterType="用户" databaseId="oracle">-->

    <!--    </update>-->

    <!--    <delete id="删除" parameterType="String">-->

    <!--    </delete>-->

    <!-- where -->
    <select id="where示例" resultType="用户">
        SELECT 编号, 用户名, 账号, 密码, 创建时间, 修改时间
        FROM 用户表
        <where><!-- 没有手动写WHERE时会自动加where  已经写了有WHERE时不会额外加WHERE -->
            <if test="编号!=null">
                编号 = #{编号} AND
            </if>
            是否删除 = 0
        </where>
    </select>
    <!-- trim -->
    <select id="trim示例" resultType="用户">
        SELECT 编号, 用户名, 账号, 密码, 创建时间, 修改时间
        FROM 用户表
        <!-- 添加指定前缀 去除指定前缀 添加指定后缀 去除指定后缀 -->
        <trim prefix="WHERE" prefixOverrides="xx" suffix="" suffixOverrides="xx">
            <if test="编号!=null">
                xx 编号 = #{编号} AND
            </if>
            是否删除 = 0 xx
        </trim>
    </select>
    <!-- choose -->
    <select id="choose示例" resultType="用户">
        SELECT 编号, 用户名, 账号, 密码, 创建时间, 修改时间
        FROM 用户表
        <where><!-- 类似switch 只会从多个条件中选一个 -->
            <choose>
                <when test="编号!=null">
                    编号 = #{编号}
                </when>
                <when test="账号!=null">
                    账号 = #{账号}
                </when>
            </choose>
        </where>
    </select>
    <!-- set -->
    <update id="set示例">
        UPDATE 用户表
        <set><!-- 主要用于避免set语句中出现多余的 逗号 的问题 -->
            <if test="用户名!=null">
                用户名 = #{用户名}
            </if>
            <if test="密码!=null">
                密码 = #{密码}
            </if>
            <if test="修改时间!=null">
                修改时间 = #{修改时间}
            </if>
        </set>
        WHERE 编号 = #{编号}
    </update>
    <!-- foreach -->
    <select id="foreach示例" resultType="用户">
        SELECT 编号, 用户名, 账号, 密码, 创建时间, 修改时间
        FROM 用户表
        WHERE 是否删除 = 0 AND 编号 IN
        <!-- index属性代表list集合的下标 或者map集合的key -->
        <!-- @param注解在junit测试时不起作用  使用默认值list或者collection 或者map集合的key -->
        <foreach collection="list" item="编号" separator="," open="(" close=")">
            #{编号}
        </foreach>
    </select>

</mapper>
